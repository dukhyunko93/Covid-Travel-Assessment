{"ast":null,"code":"var _jsxFileName = \"/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nconst libraries = [\"places\"];\nlet polylines = [];\nlet snappedCoordinates = [];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\"\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true\n};\n\nfunction Map() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries\n  });\n\n  const changeAddressFormat = () => {\n    let startingPoint = `${origin[0].lat}, ${origin[0].lng}`;\n    let Endpoint = `${destination[0].lat}, ${destination[0].lng}`;\n    getDirection(startingPoint, Endpoint);\n    getOriginFips(`${origin[0].lat}`, `${origin[0].lng}`);\n    getDestinationFips(`${destination[0].lat}`, `${destination[0].lng}`);\n  }; //mode input can be driving(default), walking bicycling &mode=driving\n\n\n  const getDirection = (startingPoint, Endpoint) => {\n    const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingPoint}&destination=${Endpoint}&key=${process.env.REACT_APP_GOOGLE_KEY}`; // let proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n\n    fetch(proxyUrl + url).then(response => response.json()).then(data => {\n      collectPath(data.routes[0].legs[0].steps); // console.log(data)\n    });\n  };\n\n  const collectPath = routeArray => {\n    let collectedArray = [];\n\n    for (let i = 0; i < routeArray.length; i++) {\n      let eachPoint = [];\n      eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng);\n      collectedArray.push(eachPoint);\n    } // snapToRoad(collectedArray.join(\"|\"))\n\n\n    snapToRoad(collectedArray);\n  };\n\n  const snapToRoad = path => {\n    const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => drawSnappedPolyline(data));\n  };\n\n  function drawSnappedPolyline(data) {\n    var snappedPolyline = new window.google.maps.Polyline({\n      path: data,\n      strokeColor: '#add8e6',\n      strokeWeight: 4,\n      strokeOpacity: 0.9\n    });\n    snappedPolyline.setMap(mapRef);\n    polylines.push(snappedPolyline);\n  }\n\n  const getClickedFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setClickedFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getCurrentFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setCurrentFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getOriginFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setOriginFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getDestinationFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setDestinationFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const onMapClick = React.useCallback(event => {\n    getClickedFips(event.latLng.lat(), event.latLng.lng());\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(() => [{\n        address: data.results[0].formatted_address,\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const onLocate = React.useCallback(position => {\n    getCurrentFips(position.coords.latitude, position.coords.longitude);\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(() => [{\n        address: data.results[0].formatted_address,\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const selectOrigin = React.useCallback((grid, address) => {\n    setOrigin(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const selectDestination = React.useCallback((grid, address) => {\n    setDestination(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(15);\n  }, []);\n  const [currentfips, setCurrentFips] = React.useState([]);\n  const [clickedfips, setClickedFips] = React.useState([]);\n  const [originfips, setOriginFips] = React.useState([]);\n  const [destinationfips, setDestinationFips] = React.useState([]);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState([null]);\n  const [origin, setOrigin] = React.useState([]);\n  const [destination, setDestination] = React.useState([]);\n  const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Mpas\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"map-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, \"Covid Hater\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"virus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDA0\")), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    onLocate: onLocate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SearchOrigin, {\n    panTo: panTo,\n    selectOrigin: selectOrigin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SearchDestination, {\n    panTo: panTo,\n    selectDestination: selectDestination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"direction-button\",\n    onClick: origin && destination ? changeAddressFormat : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, \"Direction\"), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 15\n    }\n  })), origin.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 15\n    }\n  })), destination.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  })), infoWindowVisible && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 19\n    }\n  }, \"Selected!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 19\n    }\n  }, \"Address: \", selected.address), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 19\n    }\n  }, \"Latitude: \", selected.lat, \" Longitude:\", selected.lng))))));\n}\n\nexport default Map;\n\nfunction Locate({\n  panTo,\n  onLocate\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        onLocate(position);\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }\n  }, \"\\uD83E\\uDDED \")));\n}\n\nfunction SearchOrigin({\n  panTo,\n  selectOrigin\n}) {\n  const {\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 40.7128,\n        lng: () => -74.0060\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n        {\n          selectOrigin({\n            lat,\n            lng\n          }, address);\n        }\n      } catch (error) {\n        console.log(\"Error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    placeholder: \"Enter a address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, status === \"OK\" && data.map(({\n    place_id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: place_id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 19\n    }\n  }))))));\n}\n\nfunction SearchDestination({\n  panTo,\n  selectDestination\n}) {\n  const {\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 40.7128,\n        lng: () => -74.0060\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n        {\n          selectDestination({\n            lat,\n            lng\n          }, address);\n        }\n      } catch (error) {\n        console.log(\"Error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    placeholder: \"Enter a address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 13\n    }\n  }, status === \"OK\" && data.map(({\n    place_id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: place_id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 19\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","mapStyles","libraries","polylines","snappedCoordinates","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","streetViewControl","Map","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","changeAddressFormat","startingPoint","origin","Endpoint","destination","getDirection","getOriginFips","getDestinationFips","url","fetch","proxyUrl","then","response","json","data","collectPath","routes","legs","steps","routeArray","collectedArray","i","length","eachPoint","push","start_location","snapToRoad","path","drawSnappedPolyline","snappedPolyline","window","google","maps","Polyline","strokeColor","strokeWeight","strokeOpacity","setMap","mapRef","getClickedFips","useCallback","setClickedFips","fips","results","county_fips","county_name","getCurrentFips","setCurrentFips","setOriginFips","setDestinationFips","onMapClick","event","latLng","setMarkers","address","formatted_address","time","Date","onLocate","position","coords","latitude","longitude","selectOrigin","grid","setOrigin","selectDestination","setDestination","useRef","onMapLoad","map","current","panTo","setZoom","currentfips","useState","clickedfips","originfips","destinationfips","markers","selected","setSelected","infoWindowVisible","setInfoWindowVisible","marker","toISOString","scaledSize","Size","Point","anchor","Locate","navigator","geolocation","getCurrentPosition","SearchOrigin","value","suggestions","status","setValue","clearSuggestions","requestOptions","location","radius","error","console","log","e","target","place_id","description","SearchDestination"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {GoogleMap, useLoadScript, Marker, InfoWindow} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {getGeocode, getLatLng} from \"use-places-autocomplete\";\nimport {Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nconst libraries = [\"places\"];\nlet polylines = [];\nlet snappedCoordinates = [];\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\",\n}\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n}\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true,\n}\n \nfunction Map() {\n\n    const {isLoaded, loadError} = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries,\n    });\n\n    const changeAddressFormat = () => {\n      let startingPoint = `${origin[0].lat}, ${origin[0].lng}`\n      let Endpoint = `${destination[0].lat}, ${destination[0].lng}`\n      getDirection(startingPoint, Endpoint)\n      getOriginFips(`${origin[0].lat}`, `${origin[0].lng}`)\n      getDestinationFips(`${destination[0].lat}`, `${destination[0].lng}`)\n    }\n\n    //mode input can be driving(default), walking bicycling &mode=driving\n\n    const getDirection = (startingPoint, Endpoint) => {\n      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingPoint}&destination=${Endpoint}&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      // let proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n      fetch(proxyUrl + url)\n      .then(response => response.json())\n      .then(data => {\n        collectPath(data.routes[0].legs[0].steps)\n        // console.log(data)\n      })\n    }\n\n    const collectPath = (routeArray) => {\n      let collectedArray = []\n      for ( let i = 0; i < routeArray.length; i++ ){\n        let eachPoint = []\n        eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng)\n        collectedArray.push(eachPoint)\n      }\n      // snapToRoad(collectedArray.join(\"|\"))\n      snapToRoad(collectedArray)\n    }\n\n    const snapToRoad = (path) => {\n      const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      fetch(url)\n      .then(response => response.json())\n      .then(data => drawSnappedPolyline(data))\n    }\n\n    function drawSnappedPolyline(data) {\n      var snappedPolyline = new window.google.maps.Polyline({\n        path: data,\n        strokeColor: '#add8e6',\n        strokeWeight: 4,\n        strokeOpacity: 0.9,\n      });\n    \n      snappedPolyline.setMap(mapRef);\n      polylines.push(snappedPolyline);\n    }\n\n    const getClickedFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setClickedFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getCurrentFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setCurrentFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getOriginFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setOriginFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getDestinationFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setDestinationFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const onMapClick = React.useCallback((event) => {\n      getClickedFips(event.latLng.lat(), event.latLng.lng())\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setMarkers(() => [\n            { \n              address: data.results[0].formatted_address,\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng(),\n              time: new Date()\n          }]);\n      })\n    }, []);\n\n    const onLocate = React.useCallback((position) => {\n      getCurrentFips(position.coords.latitude, position.coords.longitude)\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setMarkers(() => [{ \n          address: data.results[0].formatted_address,\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          time: new Date()\n        }]);\n      })\n    }, []);\n\n    const selectOrigin = React.useCallback((grid, address) => {\n      setOrigin(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n\n    const selectDestination = React.useCallback((grid, address) => {\n      setDestination(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n    \n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n      mapRef.current = map;\n    }, []);\n\n    const panTo = React.useCallback(({lat,lng}) => {\n      mapRef.current.panTo({lat,lng});\n      mapRef.current.setZoom(15);\n    }, []);\n\n    const [currentfips, setCurrentFips] = React.useState([]);\n    const [clickedfips, setClickedFips] = React.useState([]);\n    const [originfips, setOriginFips] = React.useState([]);\n    const [destinationfips, setDestinationFips] = React.useState([]);\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState([null]);\n    const [origin, setOrigin] = React.useState([]);\n    const [destination, setDestination] = React.useState([]);\n\n    const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n\n    if(loadError) return \"Error loading maps\";\n    if(!isLoaded) return \"Loading Mpas\";\n    return (\n      <div className=\"map-container\">\n        <div className=\"map\">\n          <h1 id=\"map-logo\">\n            Covid Hater{\" \"}\n            <span role=\"img\" aria-label=\"virus\">🦠</span>\n          </h1>\n          <Locate panTo={panTo} onLocate={onLocate} />\n          <SearchOrigin panTo={panTo} selectOrigin={selectOrigin}  />\n          <SearchDestination panTo={panTo} selectDestination={selectDestination} />\n          <button className=\"direction-button\" onClick={origin && destination ? changeAddressFormat : null} >\n            Direction\n          </button>\n          <GoogleMap \n            mapContainerStyle={mapContainerStyle} \n            zoom={8} center={center} \n            options={options} \n            onClick={onMapClick} \n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n            {origin.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n            {destination.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n\n            {infoWindowVisible && (\n              <InfoWindow position={{lat: selected.lat, lng: selected.lng}}>\n                <div>\n                  <h2>Selected!</h2>\n                  <p>Address: {selected.address}</p>\n                  <p>Latitude: {selected.lat} Longitude:{selected.lng}</p>\n                </div>\n              </InfoWindow>\n            )}\n          </GoogleMap>\n        </div>\n      </div>\n    );\n}\n\nexport default Map;\n\nfunction Locate({ panTo, onLocate }) {\n  return (\n    <button className=\"locate\" onClick={() => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        onLocate(position)\n      }, \n      () => null);\n    }}>\n      <h1 className=\"compass\">\n        <span role=\"img\" aria-label=\"compass\">🧭 </span>\n      </h1>\n    </button>\n  )\n}\n\nfunction SearchOrigin({ panTo, selectOrigin }) {\n\n  const {\n    value, \n    suggestions:{status, data}, \n    setValue, \n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {lat: () => 40.7128, lng: () => -74.0060},\n      radius: 200 * 1000\n    }\n  })\n\n  return (\n      <div className=\"search-bar1\">\n        <Combobox \n          onSelect={async (address) => {\n            setValue(address, false);\n            clearSuggestions()\n            try {\n              const results = await getGeocode({address});\n              const { lat, lng } = await getLatLng(results[0]);\n              panTo({ lat, lng });\n              {selectOrigin({ lat, lng }, address)}\n            } catch(error){\n              console.log(\"Error!\")\n            }\n          }}\n        >\n          <ComboboxInput \n            value={value} \n            onChange={(e) => {\n              setValue(e.target.value)\n            }}\n            placeholder=\"Enter a address\"\n          />\n          <ComboboxPopover>\n            <ComboboxList>\n              {status === \"OK\" && \n                data.map(({place_id, description}) => (\n                  <ComboboxOption key={place_id} value={description}/>\n                ))}\n            </ComboboxList>\n          </ComboboxPopover>\n        </Combobox>\n      </div>\n  )\n}\n\nfunction SearchDestination({ panTo, selectDestination }) {\n\n  const {\n    value, \n    suggestions:{status, data}, \n    setValue, \n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {lat: () => 40.7128, lng: () => -74.0060},\n      radius: 200 * 1000\n    }\n  })\n\n  return (\n      <div className=\"search-bar2\">\n        <Combobox \n          onSelect={async (address) => {\n            setValue(address, false);\n            clearSuggestions()\n            try {\n              const results = await getGeocode({address});\n              const { lat, lng } = await getLatLng(results[0]);\n              panTo({ lat, lng });\n              {selectDestination({ lat, lng }, address)}\n            } catch(error){\n              console.log(\"Error!\")\n            }\n          }}\n        >\n          <ComboboxInput \n            value={value} \n            onChange={(e) => {\n              setValue(e.target.value)\n            }}\n            placeholder=\"Enter a address\"\n          />\n          <ComboboxPopover>\n            <ComboboxList>\n              {status === \"OK\" && \n                data.map(({place_id, description}) => (\n                  <ComboboxOption key={place_id} value={description}/>\n                ))}\n            </ComboboxList>\n          </ComboboxPopover>\n        </Combobox>\n      </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}