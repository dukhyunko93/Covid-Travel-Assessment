{"ast":null,"code":"var _jsxFileName = \"/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nimport Search from './Search';\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\"\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true\n};\n\nfunction Map() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries\n  }); //mode input can be driving(default), walking bicycling &mode=driving\n\n  const getDirection = (startingAddress, EndAddress) => {\n    const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingAddress}&destination=${EndAddress}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    let proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n    fetch(proxyUrl + url).then(response => response.json()).then(data => {\n      // let routeArray = data.routes[0].legs[0].steps\n      console.log(data);\n    });\n  };\n\n  const collectPath = routeArray => {\n    let collectedArray = [];\n\n    for (let i = 0; i < routeArray.length; i++) {\n      let eachPoint = [];\n      eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng);\n      collectedArray.push(eachPoint);\n    }\n\n    setPath(() => [{\n      path: collectedArray.join(\"|\")\n    }], []);\n  };\n\n  const snapToRoad = () => {\n    const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => console.log(data));\n  };\n\n  const getFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const onMapClick = React.useCallback(event => {\n    getDirection(); // snapToRoad()\n\n    getFips(event.latLng.lat(), event.latLng.lng());\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(current => [...current, {\n        address: data.results[0].formatted_address,\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const onLocate = React.useCallback(position => {\n    getFips(position.coords.latitude, position.coords.longitude);\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(() => [{\n        address: data.results[0].formatted_address,\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const selectOrigin = React.useCallback((grid, address) => {\n    setMarkers(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const selectDeparture = React.useCallback((grid, address) => {\n    setMarkers(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(15);\n  }, []);\n  const [fips, setFips] = React.useState([]);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState([null]);\n  const [path, setPath] = React.useState([]);\n  const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Mpas\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"map-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"Covid Hater\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"virus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDA0\")), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    onLocate: onLocate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    panTo: panTo,\n    selectOrigin: selectOrigin,\n    selectDeparture: selectDeparture,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 11\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  })), infoWindowVisible && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }, \"Selected!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }\n  }, \"Address: \", selected.address), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 19\n    }\n  }, \"Latitude: \", selected.lat, \" Longitude:\", selected.lng))))));\n}\n\nexport default Map;\n\nfunction Locate({\n  panTo,\n  onLocate\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        onLocate(position);\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, \"\\uD83E\\uDDED \")));\n}","map":{"version":3,"sources":["/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","usePlacesAutocomplete","getGeocode","getLatLng","mapStyles","Search","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","streetViewControl","Map","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","getDirection","startingAddress","EndAddress","url","proxyUrl","fetch","then","response","json","data","console","log","collectPath","routeArray","collectedArray","i","length","eachPoint","push","start_location","setPath","path","join","snapToRoad","getFips","useCallback","setFips","fips","results","county_fips","county_name","onMapClick","event","latLng","setMarkers","current","address","formatted_address","time","Date","onLocate","position","coords","latitude","longitude","selectOrigin","grid","selectDeparture","mapRef","useRef","onMapLoad","map","panTo","setZoom","useState","markers","selected","setSelected","infoWindowVisible","setInfoWindowVisible","marker","toISOString","scaledSize","window","google","maps","Size","origin","Point","anchor","Locate","navigator","geolocation","getCurrentPosition"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {GoogleMap, useLoadScript, Marker, InfoWindow} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {getGeocode, getLatLng} from \"use-places-autocomplete\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nimport Search from './Search'\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\",\n}\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n}\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true,\n}\n \nfunction Map() {\n\n    const {isLoaded, loadError} = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries,\n    });\n    \n    //mode input can be driving(default), walking bicycling &mode=driving\n    const getDirection = (startingAddress, EndAddress) => {\n      const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingAddress}&destination=${EndAddress}&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      let proxyUrl = 'https://cors-anywhere.herokuapp.com/'\n      fetch(proxyUrl + url)\n      .then(response => response.json())\n      .then(data => {\n        // let routeArray = data.routes[0].legs[0].steps\n        console.log(data)\n      })\n    }\n\n    const collectPath = (routeArray) => {\n      let collectedArray = []\n      for ( let i = 0; i < routeArray.length; i++ ){\n        let eachPoint = []\n        eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng)\n        collectedArray.push(eachPoint)\n      }\n      setPath(() => [{ \n        path: collectedArray.join(\"|\")\n      }], []);\n    }\n\n    const snapToRoad = () => {\n      const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      fetch( url)\n      .then(response => response.json())\n      .then(data => console.log(data))\n    }\n\n    const getFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, []);\n\n    const onMapClick = React.useCallback((event) => {\n      getDirection()\n      // snapToRoad()\n      getFips(event.latLng.lat(), event.latLng.lng())\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setMarkers((current) => [\n            ...current,\n            { \n              address: data.results[0].formatted_address,\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng(),\n              time: new Date()\n          }]);\n      })\n    }, []);\n\n    const onLocate = React.useCallback((position) => {\n      getFips(position.coords.latitude, position.coords.longitude)\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setMarkers(() => [{ \n          address: data.results[0].formatted_address,\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          time: new Date()\n        }]);\n      })\n    }, []);\n\n    const selectOrigin = React.useCallback((grid, address) => {\n      setMarkers(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n\n    const selectDeparture = React.useCallback((grid, address) => {\n      setMarkers(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n    \n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n      mapRef.current = map;\n    }, []);\n\n    const panTo = React.useCallback(({lat,lng}) => {\n      mapRef.current.panTo({lat,lng});\n      mapRef.current.setZoom(15);\n    }, []);\n\n    const [fips, setFips] = React.useState([]);\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState([null]);\n    const [path, setPath] = React.useState([]);\n\n    const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n\n    if(loadError) return \"Error loading maps\";\n    if(!isLoaded) return \"Loading Mpas\";\n\n    return (\n      <div className=\"map-container\">\n        <div className=\"map\">\n          <h1 id=\"map-logo\">\n            Covid Hater{\" \"}\n            <span role=\"img\" aria-label=\"virus\">🦠</span>\n          </h1>\n          <Locate panTo={panTo} onLocate={onLocate} />\n          <Search panTo={panTo} selectOrigin={selectOrigin} selectDeparture={selectDeparture} />\n          <GoogleMap \n            mapContainerStyle={mapContainerStyle} \n            zoom={8} center={center} \n            options={options} \n            onClick={onMapClick} \n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n\n            {infoWindowVisible && (\n              <InfoWindow position={{lat: selected.lat, lng: selected.lng}}>\n                <div>\n                  <h2>Selected!</h2>\n                  <p>Address: {selected.address}</p>\n                  <p>Latitude: {selected.lat} Longitude:{selected.lng}</p>\n                </div>\n              </InfoWindow>\n            )}\n          </GoogleMap>\n        </div>\n      </div>\n    );\n}\n\nexport default Map;\n\nfunction Locate({ panTo, onLocate }) {\n  return (\n    <button className=\"locate\" onClick={() => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        onLocate(position)\n      }, \n      () => null);\n    }}>\n      <h1 className=\"compass\">\n        <span role=\"img\" aria-label=\"compass\">🧭 </span>\n      </h1>\n    </button>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}