{"ast":null,"code":"var _jsxFileName = \"/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js\";\nimport React from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsRenderer } from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport { Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption } from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nconst libraries = [\"places\"];\nlet polylines = [];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\"\n};\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true\n};\n\nfunction Map() {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n    libraries\n  });\n\n  const changeAddressFormat = () => {\n    // let startingPoint = `${origin[0].lat},${origin[0].lng}`\n    // let Endpoint = `${destination[0].lat},${destination[0].lng}`\n    getDirection(origin, destination);\n    getOriginFips(`${origin[0].lat}`, `${origin[0].lng}`);\n    getDestinationFips(`${destination[0].lat}`, `${destination[0].lng}`);\n  }; //mode input can be driving(default), walking bicycling &mode=driving\n\n\n  const getDirection = (origin, destination) => {\n    const DirectionsService = new window.google.maps.DirectionsService();\n    DirectionsService.route({\n      origin: new window.google.maps.LatLng(origin[0].lat, origin[0].lng),\n      destination: new window.google.maps.LatLng(destination[0].lat, destination[0].lng),\n      travelMode: window.google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      if (status === window.google.maps.DirectionsStatus.OK) {\n        console.log(result);\n        setDirections(() => [{\n          directions: result.routes[0].legs\n        }]);\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }; // const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingPoint}&destination=${Endpoint}&key=${process.env.REACT_APP_GOOGLE_KEY}`\n  // // const proxyUrl = `cors-anywhere.herokuapp.com/`\n  // const proxyUrl = 'https://thingproxy.freeboard.io/fetch/'\n  // fetch(proxyUrl + url)\n  // .then(response => response.json())\n  // .then(data => {\n  //   collectPath(data.routes[0].legs[0].steps)\n  // })\n\n\n  const collectPath = routeArray => {\n    let collectedArray = [];\n\n    for (let i = 0; i < routeArray.length; i++) {\n      let eachPoint = [];\n      eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng);\n      collectedArray.push(eachPoint);\n    }\n\n    snapToRoad(collectedArray.join(\"|\"));\n  };\n\n  const snapToRoad = path => {\n    const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => processSnapToRoadResponse(data));\n  };\n\n  function processSnapToRoadResponse(data) {\n    let snappedCoordinates = [];\n\n    for (let i = 0; i < data.snappedPoints.length; i++) {\n      let latlng = {\n        lat: data.snappedPoints[i].location.latitude,\n        lng: data.snappedPoints[i].location.longitude\n      };\n      snappedCoordinates.push(latlng);\n      console.log(latlng);\n    }\n\n    console.log(snappedCoordinates);\n    drawSnappedPolyline(snappedCoordinates);\n  }\n\n  function drawSnappedPolyline(snappedCoordinates) {\n    console.log(snappedCoordinates);\n    var snappedPolyline = new window.google.maps.Polyline({\n      path: snappedCoordinates,\n      strokeColor: '#add8e6',\n      strokeWeight: 4,\n      strokeOpacity: 0.9\n    });\n    console.log(snappedPolyline);\n    polylines.push(snappedPolyline);\n  }\n\n  const getClickedFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setClickedFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getCurrentFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setCurrentFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getOriginFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setOriginFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const getDestinationFips = React.useCallback((lat, lng) => {\n    const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`;\n    fetch(url).then(response => response.json()).then(data => {\n      setDestinationFips(() => [{\n        fips: data.results[0].county_fips,\n        county_name: data.results[0].county_name\n      }]);\n    });\n  }, []);\n  const onMapClick = React.useCallback(event => {\n    getClickedFips(event.latLng.lat(), event.latLng.lng());\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(() => [{\n        address: data.results[0].formatted_address,\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const onLocate = React.useCallback(position => {\n    getCurrentFips(position.coords.latitude, position.coords.longitude);\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n    fetch(url).then(response => response.json()).then(data => {\n      setMarkers(() => [{\n        address: data.results[0].formatted_address,\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        time: new Date()\n      }]);\n    });\n  }, []);\n  const selectOrigin = React.useCallback((grid, address) => {\n    setOrigin(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const selectDestination = React.useCallback((grid, address) => {\n    setDestination(() => [{\n      address: address,\n      lat: grid.lat,\n      lng: grid.lng,\n      time: new Date()\n    }]);\n  }, []);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = React.useCallback(({\n    lat,\n    lng\n  }) => {\n    mapRef.current.panTo({\n      lat,\n      lng\n    });\n    mapRef.current.setZoom(15);\n  }, []);\n  const [currentfips, setCurrentFips] = React.useState([]);\n  const [clickedfips, setClickedFips] = React.useState([]);\n  const [originfips, setOriginFips] = React.useState([]);\n  const [destinationfips, setDestinationFips] = React.useState([]);\n  const [markers, setMarkers] = React.useState([]);\n  const [selected, setSelected] = React.useState([null]);\n  const [origin, setOrigin] = React.useState([]);\n  const [destination, setDestination] = React.useState([]);\n  const [directions, setDirections] = React.useState([]);\n  const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Mpas\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    id: \"map-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }\n  }, \"Covid Hater\", \" \", /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"virus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDDA0\")), /*#__PURE__*/React.createElement(Locate, {\n    panTo: panTo,\n    onLocate: onLocate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SearchOrigin, {\n    panTo: panTo,\n    selectOrigin: selectOrigin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SearchDestination, {\n    panTo: panTo,\n    selectDestination: selectDestination,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"direction-button\",\n    onClick: origin && destination ? changeAddressFormat : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, \"Direction\"), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 8,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }\n  }, markers.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  })), origin.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })), destination.map(marker => /*#__PURE__*/React.createElement(Marker, {\n    key: marker.time.toISOString(),\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: \"https://static.thenounproject.com/png/113403-200.png\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(25, 25)\n    },\n    onClick: () => {\n      setSelected(marker);\n      setInfoWindowVisible(!infoWindowVisible);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 15\n    }\n  })), infoWindowVisible && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }, \"Selected!\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 19\n    }\n  }, \"Address: \", selected.address), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }\n  }, \"Latitude: \", selected.lat, \" Longitude:\", selected.lng))), directions && /*#__PURE__*/React.createElement(DirectionsRenderer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 17\n    }\n  }, directions)))));\n}\n\nexport default Map;\n\nfunction Locate({\n  panTo,\n  onLocate\n}) {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"locate\",\n    onClick: () => {\n      navigator.geolocation.getCurrentPosition(position => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        onLocate(position);\n      }, () => null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"compass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, \"\\uD83E\\uDDED \")));\n}\n\nfunction SearchOrigin({\n  panTo,\n  selectOrigin\n}) {\n  const {\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 40.7128,\n        lng: () => -74.0060\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n        {\n          selectOrigin({\n            lat,\n            lng\n          }, address);\n        }\n      } catch (error) {\n        console.log(\"Error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    placeholder: \"Enter a address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }, status === \"OK\" && data.map(({\n    place_id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: place_id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 19\n    }\n  }))))));\n}\n\nfunction SearchDestination({\n  panTo,\n  selectDestination\n}) {\n  const {\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => 40.7128,\n        lng: () => -74.0060\n      },\n      radius: 200 * 1000\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-bar2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Combobox, {\n    onSelect: async address => {\n      setValue(address, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n        {\n          selectDestination({\n            lat,\n            lng\n          }, address);\n        }\n      } catch (error) {\n        console.log(\"Error!\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxInput, {\n    value: value,\n    onChange: e => {\n      setValue(e.target.value);\n    },\n    placeholder: \"Enter a address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ComboboxPopover, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ComboboxList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }\n  }, status === \"OK\" && data.map(({\n    place_id,\n    description\n  }) => /*#__PURE__*/React.createElement(ComboboxOption, {\n    key: place_id,\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 19\n    }\n  }))))));\n}","map":{"version":3,"sources":["/Users/dukhyunko/Development/Covid-Travel/Covid-Travel-Risk-Assessment-Tool-frontend/src/components/Map.js"],"names":["React","GoogleMap","useLoadScript","Marker","InfoWindow","DirectionsRenderer","usePlacesAutocomplete","getGeocode","getLatLng","Combobox","ComboboxInput","ComboboxPopover","ComboboxList","ComboboxOption","mapStyles","libraries","polylines","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","streetViewControl","Map","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_GOOGLE_KEY","changeAddressFormat","getDirection","origin","destination","getOriginFips","getDestinationFips","DirectionsService","window","google","maps","route","LatLng","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","console","log","setDirections","directions","routes","legs","error","collectPath","routeArray","collectedArray","i","length","eachPoint","push","start_location","snapToRoad","join","path","url","fetch","then","response","json","data","processSnapToRoadResponse","snappedCoordinates","snappedPoints","latlng","location","latitude","longitude","drawSnappedPolyline","snappedPolyline","Polyline","strokeColor","strokeWeight","strokeOpacity","getClickedFips","useCallback","setClickedFips","fips","results","county_fips","county_name","getCurrentFips","setCurrentFips","setOriginFips","setDestinationFips","onMapClick","event","latLng","setMarkers","address","formatted_address","time","Date","onLocate","position","coords","selectOrigin","grid","setOrigin","selectDestination","setDestination","mapRef","useRef","onMapLoad","map","current","panTo","setZoom","currentfips","useState","clickedfips","originfips","destinationfips","markers","selected","setSelected","infoWindowVisible","setInfoWindowVisible","marker","toISOString","scaledSize","Size","Point","anchor","Locate","navigator","geolocation","getCurrentPosition","SearchOrigin","value","suggestions","setValue","clearSuggestions","requestOptions","radius","e","target","place_id","description","SearchDestination"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {GoogleMap, useLoadScript, Marker, InfoWindow, DirectionsRenderer} from \"@react-google-maps/api\";\nimport usePlacesAutocomplete, {getGeocode, getLatLng} from \"use-places-autocomplete\";\nimport {Combobox, ComboboxInput, ComboboxPopover, ComboboxList, ComboboxOption} from \"@reach/combobox\";\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from './MapStyle';\nconst libraries = [\"places\"];\nlet polylines = [];\n\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"80%\",\n}\n\nconst center = {\n  lat: 40.7128,\n  lng: -74.0060,\n}\n\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  streetViewControl: true,\n}\n \nfunction Map() {\n\n    const {isLoaded, loadError} = useLoadScript({\n      googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY,\n      libraries,\n    });\n\n    const changeAddressFormat = () => {\n      \n      // let startingPoint = `${origin[0].lat},${origin[0].lng}`\n      // let Endpoint = `${destination[0].lat},${destination[0].lng}`\n      getDirection(origin, destination)\n      getOriginFips(`${origin[0].lat}`, `${origin[0].lng}`)\n      getDestinationFips(`${destination[0].lat}`, `${destination[0].lng}`)\n    }\n\n    //mode input can be driving(default), walking bicycling &mode=driving\n\n    const getDirection = (origin, destination) => {\n      const DirectionsService = new window.google.maps.DirectionsService();\n      DirectionsService.route({\n        origin: new window.google.maps.LatLng(origin[0].lat, origin[0].lng),\n        destination: new window.google.maps.LatLng(destination[0].lat, destination[0].lng),\n        travelMode: window.google.maps.TravelMode.DRIVING,\n      },(result, status) => {\n        if (status === window.google.maps.DirectionsStatus.OK) {\n          console.log(result)\n          setDirections(() => [{\n            directions: result.routes[0].legs,\n          }]);\n        } else {\n          console.error(`error fetching directions ${result}`);\n        }\n      })\n    }\n    \n      // const url = `https://maps.googleapis.com/maps/api/directions/json?origin=${startingPoint}&destination=${Endpoint}&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      // // const proxyUrl = `cors-anywhere.herokuapp.com/`\n      // const proxyUrl = 'https://thingproxy.freeboard.io/fetch/'\n      // fetch(proxyUrl + url)\n      // .then(response => response.json())\n      // .then(data => {\n      //   collectPath(data.routes[0].legs[0].steps)\n      // })\n\n    const collectPath = (routeArray) => {\n      let collectedArray = []\n      for ( let i = 0; i < routeArray.length; i++ ){\n        let eachPoint = []\n        eachPoint.push(routeArray[i].start_location.lat, routeArray[i].start_location.lng)\n        collectedArray.push(eachPoint)\n      }\n      snapToRoad(collectedArray.join(\"|\"))\n    }\n\n    const snapToRoad = (path) => {\n      const url = `https://roads.googleapis.com/v1/snapToRoads?path=${path}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_KEY}`\n      fetch(url)\n      .then(response => response.json())\n      .then(data => processSnapToRoadResponse(data))\n    }\n\n    function processSnapToRoadResponse(data) {\n      let snappedCoordinates = [];\n      for (let i = 0; i < data.snappedPoints.length; i++) {\n        let latlng = {\n            lat: data.snappedPoints[i].location.latitude,\n            lng: data.snappedPoints[i].location.longitude};\n        snappedCoordinates.push(latlng);\n        console.log(latlng)\n      }\n      console.log(snappedCoordinates)\n      drawSnappedPolyline(snappedCoordinates)\n    }\n\n    function drawSnappedPolyline(snappedCoordinates) {\n      console.log(snappedCoordinates)\n      var snappedPolyline = new window.google.maps.Polyline({\n        path: snappedCoordinates,\n        strokeColor: '#add8e6',\n        strokeWeight: 4,\n        strokeOpacity: 0.9,\n      });\n    \n      console.log(snappedPolyline)\n      polylines.push(snappedPolyline);\n    }\n\n    const getClickedFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setClickedFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getCurrentFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setCurrentFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getOriginFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setOriginFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const getDestinationFips = React.useCallback((lat, lng) => {\n      const url = `https://geo.fcc.gov/api/census/area?lat=${lat}&lon=${lng}&format=json`\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setDestinationFips(() => [{\n            fips: data.results[0].county_fips,\n            county_name: data.results[0].county_name,\n          }]);\n      })\n    }, [])\n\n    const onMapClick = React.useCallback((event) => {\n      getClickedFips(event.latLng.lat(), event.latLng.lng())\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${event.latLng.lat()},${event.latLng.lng()}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          setMarkers(() => [\n            { \n              address: data.results[0].formatted_address,\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng(),\n              time: new Date()\n          }]);\n      })\n    }, []);\n\n    const onLocate = React.useCallback((position) => {\n      getCurrentFips(position.coords.latitude, position.coords.longitude)\n      const url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=${process.env.REACT_APP_GOOGLE_KEY}`;\n      fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setMarkers(() => [{ \n          address: data.results[0].formatted_address,\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          time: new Date()\n        }]);\n      })\n    }, []);\n\n    const selectOrigin = React.useCallback((grid, address) => {\n      setOrigin(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n\n    const selectDestination = React.useCallback((grid, address) => {\n      setDestination(() => [{\n        address: address,\n        lat: grid.lat,\n        lng: grid.lng,\n        time: new Date()\n      }]);\n    }, []);\n    \n    const mapRef = React.useRef();\n    const onMapLoad = React.useCallback((map) => {\n      mapRef.current = map;\n    }, []);\n\n    const panTo = React.useCallback(({lat,lng}) => {\n      mapRef.current.panTo({lat,lng});\n      mapRef.current.setZoom(15);\n    }, []);\n\n    const [currentfips, setCurrentFips] = React.useState([]);\n    const [clickedfips, setClickedFips] = React.useState([]);\n    const [originfips, setOriginFips] = React.useState([]);\n    const [destinationfips, setDestinationFips] = React.useState([]);\n    const [markers, setMarkers] = React.useState([]);\n    const [selected, setSelected] = React.useState([null]);\n    const [origin, setOrigin] = React.useState([]);\n    const [destination, setDestination] = React.useState([]);\n    const [directions, setDirections] = React.useState([]);\n\n    const [infoWindowVisible, setInfoWindowVisible] = React.useState(false);\n\n    if(loadError) return \"Error loading maps\";\n    if(!isLoaded) return \"Loading Mpas\";\n    return (\n      <div className=\"map-container\">\n        <div className=\"map\">\n          <h1 id=\"map-logo\">\n            Covid Hater{\" \"}\n            <span role=\"img\" aria-label=\"virus\">🦠</span>\n          </h1>\n          <Locate panTo={panTo} onLocate={onLocate} />\n          <SearchOrigin panTo={panTo} selectOrigin={selectOrigin}  />\n          <SearchDestination panTo={panTo} selectDestination={selectDestination} />\n          <button className=\"direction-button\" onClick={origin && destination ? changeAddressFormat : null} >\n            Direction\n          </button>\n          <GoogleMap \n            mapContainerStyle={mapContainerStyle} \n            zoom={8} center={center} \n            options={options} \n            onClick={onMapClick} \n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n            {origin.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n            {destination.map((marker) => (\n              <Marker \n                key={marker.time.toISOString()} \n                position={{lat: marker.lat, lng: marker.lng}}\n                icon={{\n                  url:\"https://static.thenounproject.com/png/113403-200.png\",\n                  scaledSize: new window.google.maps.Size(50,50),\n                  origin: new window.google.maps.Point(0,0),\n                  anchor: new window.google.maps.Point(25,25),\n                }}\n                onClick={() => {\n                  setSelected(marker)\n                  setInfoWindowVisible(!infoWindowVisible)\n                }}\n              >\n              </Marker>\n            ))}\n\n            {infoWindowVisible && (\n              <InfoWindow position={{lat: selected.lat, lng: selected.lng}}>\n                <div>\n                  <h2>Selected!</h2>\n                  <p>Address: {selected.address}</p>\n                  <p>Latitude: {selected.lat} Longitude:{selected.lng}</p>\n                </div>\n              </InfoWindow>\n            )}\n            {directions && \n              <DirectionsRenderer>\n                <div>{directions}</div>\n              </DirectionsRenderer>\n            }\n          </GoogleMap>\n        </div>\n      </div>\n    );\n}\n\nexport default Map;\n\nfunction Locate({ panTo, onLocate }) {\n  return (\n    <button className=\"locate\" onClick={() => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        panTo({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        });\n        onLocate(position)\n      }, \n      () => null);\n    }}>\n      <h1 className=\"compass\">\n        <span role=\"img\" aria-label=\"compass\">🧭 </span>\n      </h1>\n    </button>\n  )\n}\n\nfunction SearchOrigin({ panTo, selectOrigin }) {\n\n  const {\n    value, \n    suggestions:{status, data}, \n    setValue, \n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {lat: () => 40.7128, lng: () => -74.0060},\n      radius: 200 * 1000\n    }\n  })\n\n  return (\n      <div className=\"search-bar1\">\n        <Combobox \n          onSelect={async (address) => {\n            setValue(address, false);\n            clearSuggestions()\n            try {\n              const results = await getGeocode({address});\n              const { lat, lng } = await getLatLng(results[0]);\n              panTo({ lat, lng });\n              {selectOrigin({ lat, lng }, address)}\n            } catch(error){\n              console.log(\"Error!\")\n            }\n          }}\n        >\n          <ComboboxInput \n            value={value} \n            onChange={(e) => {\n              setValue(e.target.value)\n            }}\n            placeholder=\"Enter a address\"\n          />\n          <ComboboxPopover>\n            <ComboboxList>\n              {status === \"OK\" && \n                data.map(({place_id, description}) => (\n                  <ComboboxOption key={place_id} value={description}/>\n                ))}\n            </ComboboxList>\n          </ComboboxPopover>\n        </Combobox>\n      </div>\n  )\n}\n\nfunction SearchDestination({ panTo, selectDestination }) {\n\n  const {\n    value, \n    suggestions:{status, data}, \n    setValue, \n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {lat: () => 40.7128, lng: () => -74.0060},\n      radius: 200 * 1000\n    }\n  })\n\n  return (\n      <div className=\"search-bar2\">\n        <Combobox \n          onSelect={async (address) => {\n            setValue(address, false);\n            clearSuggestions()\n            try {\n              const results = await getGeocode({address});\n              const { lat, lng } = await getLatLng(results[0]);\n              panTo({ lat, lng });\n              {selectDestination({ lat, lng }, address)}\n            } catch(error){\n              console.log(\"Error!\")\n            }\n          }}\n        >\n          <ComboboxInput \n            value={value} \n            onChange={(e) => {\n              setValue(e.target.value)\n            }}\n            placeholder=\"Enter a address\"\n          />\n          <ComboboxPopover>\n            <ComboboxList>\n              {status === \"OK\" && \n                data.map(({place_id, description}) => (\n                  <ComboboxOption key={place_id} value={description}/>\n                ))}\n            </ComboboxList>\n          </ComboboxPopover>\n        </Combobox>\n      </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}